name: SpringBoot Todo CI/CD Pipeline  # 워크플로우 이름

on:
  workflow_dispatch:  # 수동 실행 허용 (GitHub Actions에서 직접 실행할 수 있음)
  push:  # main 브랜치에 푸시될 때 자동 실행

jobs:
  build:  # 첫 번째 Job: 애플리케이션 빌드
    name: Build Archive  # Job 이름
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      - uses: actions/checkout@v4  # 현재 리포지토리 코드를 체크아웃 (복제)

      - name: Set up JDK  # JDK 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'  # AdoptOpenJDK 계열
          java-version: '17'  # 자바 17 버전 사용

      - name: Cache Maven packages  # Maven 패키지 캐시 (속도 향상 목적)
        uses: actions/cache@v4
        with:
          path: ~/.m2  # Maven의 로컬 저장소 경로
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}  # 캐시 키 설정
          restore-keys: ${{ runner.os }}-m2  # 키가 일치하지 않으면 이 키로 복원 시도

      - name: Build with Maven  # Maven으로 프로젝트 빌드 (테스트는 생략)
        run: mvn -B package -DskipTests --file pom.xml

      - name: Find name  # 빌드된 JAR 파일 위치 확인용 (디버깅 목적)
        run: find . -name "*.jar"

      - name: Upload JAR  # 빌드한 JAR 파일을 업로드 (다음 Job에서 사용하기 위해)
        uses: actions/upload-artifact@v4
        with:
          name: artifact  # 업로드할 파일 이름 (자유롭게 지정 가능)
          path: target/*.jar  # 업로드할 JAR 파일 경로

  deploy:  # 두 번째 Job: AWS Elastic Beanstalk에 배포
    needs: build  # build Job이 완료되어야 실행됨
    name: Deploy to Elastic Beanstalk  # Job 이름
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 실행

    steps:
      - name: Download JAR  # 이전 Job에서 업로드한 JAR 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: artifact  # 업로드했던 이름과 일치해야 함

      - name: Deploy to EB  # AWS Elastic Beanstalk에
