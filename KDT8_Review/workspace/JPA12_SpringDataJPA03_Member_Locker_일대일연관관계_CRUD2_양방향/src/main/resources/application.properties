
logging.level.root=info
logging.level.com.exam==info
logging.level.org.springframework=info

server.port=8090
server.servlet.context-path=/app

# MySQL 연동
#BasicDataSource 
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/testdb
spring.datasource.username=root
spring.datasource.password=12345678


# JPA
# 다음은 권장 안함
#spring.jpa.show-sql=true
# 다음은 권장함
logging.level.org.hibernate.SQL=trace

# 위 2개의 로그값들이 이쁘게 출력됨.
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type=info
# create: drop-create 기능
# 처음 사용시 create 그 이후는 none로 설정
# create로 지정하면 schema.sql 실행 안되고 data.sql 만 실행됨.
# none 지정하면 schema.sql + data.sql  실행안됨.
spring.jpa.hibernate.ddl-auto=create  
#spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# 어떤 파라미터들이 실제로 바인딩 되는지 확인
logging.level.org.hibernate.orm.jdbc.bind=trace

# @Entity 보다 먼저 실행되기 때문에 기존 데이터가 있으면 Duplicate entry 에러발생됨.
spring.jpa.defer-datasource-initialization=true
# schema.sql 과 data.sql 실행하기 위한 설정.   always|never

# 처음 사용시 always 그 이후는 never로 설정
spring.sql.init.mode=always  

spring.mvc.pathmatch.matching-strategy=ant-path-matcher
spring.mvc.format.date=yyyy-MM-dd


# 언더바 자동변경 방지
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


spring.jpa.open-in-view=false